#!/usr/bin/ruby
# encoding: utf-8
# (c) 2011 Martin Koz√°k (martinkozak@martinkozak.net)

$:.push("./lib")
$:.unshift("./lib")

require "evented-queue"
require "riot"
  
context "EventedQueue" do
    setup do
        EventedQueue::new
    end
    
    asserts("#push") do
        done = false
        topic.push(:foo)
        topic.pop do |v| 
            done = v == :foo
        end
        done
    end
    asserts("#pop") do
        d1 = false
        d2 = false
        
        topic.push(:foo)
        topic.pop do |v| 
            d1 = v == :foo
        end
        topic.pop do |v| 
            d2 = v == :bar
        end
        topic.push(:bar)
        
        d1 and d2
    end
    asserts("#length") do
        topic.push(:foo)
        topic.pop
        d1 = topic.length == 0
        topic.push(:foo)
        d2 = topic.length == 1
        
        d1 and d2
    end
    asserts("#empty?") do
        topic.clear!
        topic.push(:foo)
        d1 = not(topic.empty?)
        topic.pop
        d2 = topic.empty?
        
        d1 and d2
    end
    asserts("#clear!") do
        topic.push(:foo)
        topic.clear!
        topic.empty?
    end
end

context "EventedQueue::Recurring" do
    asserts("#push") do
        topic = EventedQueue::Recurring::new
        done = false
        topic.push(:foo)
        topic.pop do |v| 
            done = v == :foo
        end
        done
    end
    asserts("#pop") do
        topic = EventedQueue::Recurring::new
        result = [ ]
        topic.push(:foo)
        topic.pop do |v| 
            result << v
        end
        topic.push(:bar)
        result == [:foo, :bar]
    end
    asserts("#length") do
        topic = EventedQueue::Recurring::new
        topic.push(:foo)
        topic.pop
        d1 = topic.length == 0
        topic.push(:foo)
        d2 = topic.length == 1
        
        d1 and d2
    end
    asserts("#empty?") do
        topic = EventedQueue::Recurring::new
        topic.clear!
        topic.push(:foo)
        d1 = not(topic.empty?)
        topic.pop
        d2 = topic.empty?
        
        d1 and d2
    end
    asserts("#clear!") do
        topic = EventedQueue::Recurring::new
        topic.push(:foo)
        topic.clear!
        topic.empty?
    end
end

